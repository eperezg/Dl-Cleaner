/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.liferay.dl.cleaner.model.impl;

import com.liferay.dl.cleaner.model.WcReferencedFile;
import com.liferay.dl.cleaner.model.WcReferencedFileModel;
import com.liferay.dl.cleaner.model.WcReferencedFileSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the WcReferencedFile service. Represents a row in the &quot;DlCleaner_WcReferencedFile&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.dl.cleaner.model.WcReferencedFileModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WcReferencedFileImpl}.
 * </p>
 *
 * @author guywandji
 * @see WcReferencedFileImpl
 * @see com.liferay.dl.cleaner.model.WcReferencedFile
 * @see com.liferay.dl.cleaner.model.WcReferencedFileModel
 * @generated
 */
@JSON(strict = true)
public class WcReferencedFileModelImpl extends BaseModelImpl<WcReferencedFile>
	implements WcReferencedFileModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a wc referenced file model instance should use the {@link com.liferay.dl.cleaner.model.WcReferencedFile} interface instead.
	 */
	public static final String TABLE_NAME = "DlCleaner_WcReferencedFile";
	public static final Object[][] TABLE_COLUMNS = {
			{ "wcRefencedFileId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "wcUrlTitle", Types.VARCHAR },
			{ "dlFileUuId", Types.VARCHAR },
			{ "orphan", Types.BOOLEAN },
			{ "type_", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table DlCleaner_WcReferencedFile (wcRefencedFileId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,wcUrlTitle VARCHAR(75) null,dlFileUuId VARCHAR(75) null,orphan BOOLEAN,type_ VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table DlCleaner_WcReferencedFile";
	public static final String ORDER_BY_JPQL = " ORDER BY wcReferencedFile.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY DlCleaner_WcReferencedFile.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.dl.cleaner.model.WcReferencedFile"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.dl.cleaner.model.WcReferencedFile"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.dl.cleaner.model.WcReferencedFile"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long DLFILEUUID_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;
	public static long ORPHAN_COLUMN_BITMASK = 8L;
	public static long CREATEDATE_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static WcReferencedFile toModel(WcReferencedFileSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		WcReferencedFile model = new WcReferencedFileImpl();

		model.setWcRefencedFileId(soapModel.getWcRefencedFileId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setWcUrlTitle(soapModel.getWcUrlTitle());
		model.setDlFileUuId(soapModel.getDlFileUuId());
		model.setOrphan(soapModel.getOrphan());
		model.setType(soapModel.getType());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<WcReferencedFile> toModels(
		WcReferencedFileSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<WcReferencedFile> models = new ArrayList<WcReferencedFile>(soapModels.length);

		for (WcReferencedFileSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.dl.cleaner.model.WcReferencedFile"));

	public WcReferencedFileModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _wcRefencedFileId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setWcRefencedFileId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _wcRefencedFileId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return WcReferencedFile.class;
	}

	@Override
	public String getModelClassName() {
		return WcReferencedFile.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("wcRefencedFileId", getWcRefencedFileId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("wcUrlTitle", getWcUrlTitle());
		attributes.put("dlFileUuId", getDlFileUuId());
		attributes.put("orphan", getOrphan());
		attributes.put("type", getType());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long wcRefencedFileId = (Long)attributes.get("wcRefencedFileId");

		if (wcRefencedFileId != null) {
			setWcRefencedFileId(wcRefencedFileId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String wcUrlTitle = (String)attributes.get("wcUrlTitle");

		if (wcUrlTitle != null) {
			setWcUrlTitle(wcUrlTitle);
		}

		String dlFileUuId = (String)attributes.get("dlFileUuId");

		if (dlFileUuId != null) {
			setDlFileUuId(dlFileUuId);
		}

		Boolean orphan = (Boolean)attributes.get("orphan");

		if (orphan != null) {
			setOrphan(orphan);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}
	}

	@JSON
	@Override
	public long getWcRefencedFileId() {
		return _wcRefencedFileId;
	}

	@Override
	public void setWcRefencedFileId(long wcRefencedFileId) {
		_wcRefencedFileId = wcRefencedFileId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getWcUrlTitle() {
		if (_wcUrlTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _wcUrlTitle;
		}
	}

	@Override
	public void setWcUrlTitle(String wcUrlTitle) {
		_wcUrlTitle = wcUrlTitle;
	}

	@JSON
	@Override
	public String getDlFileUuId() {
		if (_dlFileUuId == null) {
			return StringPool.BLANK;
		}
		else {
			return _dlFileUuId;
		}
	}

	@Override
	public void setDlFileUuId(String dlFileUuId) {
		_columnBitmask |= DLFILEUUID_COLUMN_BITMASK;

		if (_originalDlFileUuId == null) {
			_originalDlFileUuId = _dlFileUuId;
		}

		_dlFileUuId = dlFileUuId;
	}

	public String getOriginalDlFileUuId() {
		return GetterUtil.getString(_originalDlFileUuId);
	}

	@JSON
	@Override
	public boolean getOrphan() {
		return _orphan;
	}

	@Override
	public boolean isOrphan() {
		return _orphan;
	}

	@Override
	public void setOrphan(boolean orphan) {
		_columnBitmask |= ORPHAN_COLUMN_BITMASK;

		if (!_setOriginalOrphan) {
			_setOriginalOrphan = true;

			_originalOrphan = _orphan;
		}

		_orphan = orphan;
	}

	public boolean getOriginalOrphan() {
		return _originalOrphan;
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_type = type;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			WcReferencedFile.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public WcReferencedFile toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (WcReferencedFile)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		WcReferencedFileImpl wcReferencedFileImpl = new WcReferencedFileImpl();

		wcReferencedFileImpl.setWcRefencedFileId(getWcRefencedFileId());
		wcReferencedFileImpl.setGroupId(getGroupId());
		wcReferencedFileImpl.setCompanyId(getCompanyId());
		wcReferencedFileImpl.setUserId(getUserId());
		wcReferencedFileImpl.setUserName(getUserName());
		wcReferencedFileImpl.setCreateDate(getCreateDate());
		wcReferencedFileImpl.setModifiedDate(getModifiedDate());
		wcReferencedFileImpl.setWcUrlTitle(getWcUrlTitle());
		wcReferencedFileImpl.setDlFileUuId(getDlFileUuId());
		wcReferencedFileImpl.setOrphan(getOrphan());
		wcReferencedFileImpl.setType(getType());

		wcReferencedFileImpl.resetOriginalValues();

		return wcReferencedFileImpl;
	}

	@Override
	public int compareTo(WcReferencedFile wcReferencedFile) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				wcReferencedFile.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof WcReferencedFile)) {
			return false;
		}

		WcReferencedFile wcReferencedFile = (WcReferencedFile)obj;

		long primaryKey = wcReferencedFile.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		WcReferencedFileModelImpl wcReferencedFileModelImpl = this;

		wcReferencedFileModelImpl._originalGroupId = wcReferencedFileModelImpl._groupId;

		wcReferencedFileModelImpl._setOriginalGroupId = false;

		wcReferencedFileModelImpl._originalCompanyId = wcReferencedFileModelImpl._companyId;

		wcReferencedFileModelImpl._setOriginalCompanyId = false;

		wcReferencedFileModelImpl._originalDlFileUuId = wcReferencedFileModelImpl._dlFileUuId;

		wcReferencedFileModelImpl._originalOrphan = wcReferencedFileModelImpl._orphan;

		wcReferencedFileModelImpl._setOriginalOrphan = false;

		wcReferencedFileModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<WcReferencedFile> toCacheModel() {
		WcReferencedFileCacheModel wcReferencedFileCacheModel = new WcReferencedFileCacheModel();

		wcReferencedFileCacheModel.wcRefencedFileId = getWcRefencedFileId();

		wcReferencedFileCacheModel.groupId = getGroupId();

		wcReferencedFileCacheModel.companyId = getCompanyId();

		wcReferencedFileCacheModel.userId = getUserId();

		wcReferencedFileCacheModel.userName = getUserName();

		String userName = wcReferencedFileCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			wcReferencedFileCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			wcReferencedFileCacheModel.createDate = createDate.getTime();
		}
		else {
			wcReferencedFileCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			wcReferencedFileCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			wcReferencedFileCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		wcReferencedFileCacheModel.wcUrlTitle = getWcUrlTitle();

		String wcUrlTitle = wcReferencedFileCacheModel.wcUrlTitle;

		if ((wcUrlTitle != null) && (wcUrlTitle.length() == 0)) {
			wcReferencedFileCacheModel.wcUrlTitle = null;
		}

		wcReferencedFileCacheModel.dlFileUuId = getDlFileUuId();

		String dlFileUuId = wcReferencedFileCacheModel.dlFileUuId;

		if ((dlFileUuId != null) && (dlFileUuId.length() == 0)) {
			wcReferencedFileCacheModel.dlFileUuId = null;
		}

		wcReferencedFileCacheModel.orphan = getOrphan();

		wcReferencedFileCacheModel.type = getType();

		String type = wcReferencedFileCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			wcReferencedFileCacheModel.type = null;
		}

		return wcReferencedFileCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{wcRefencedFileId=");
		sb.append(getWcRefencedFileId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", wcUrlTitle=");
		sb.append(getWcUrlTitle());
		sb.append(", dlFileUuId=");
		sb.append(getDlFileUuId());
		sb.append(", orphan=");
		sb.append(getOrphan());
		sb.append(", type=");
		sb.append(getType());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.liferay.dl.cleaner.model.WcReferencedFile");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>wcRefencedFileId</column-name><column-value><![CDATA[");
		sb.append(getWcRefencedFileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>wcUrlTitle</column-name><column-value><![CDATA[");
		sb.append(getWcUrlTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dlFileUuId</column-name><column-value><![CDATA[");
		sb.append(getDlFileUuId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orphan</column-name><column-value><![CDATA[");
		sb.append(getOrphan());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = WcReferencedFile.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			WcReferencedFile.class
		};
	private long _wcRefencedFileId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _wcUrlTitle;
	private String _dlFileUuId;
	private String _originalDlFileUuId;
	private boolean _orphan;
	private boolean _originalOrphan;
	private boolean _setOriginalOrphan;
	private String _type;
	private long _columnBitmask;
	private WcReferencedFile _escapedModel;
}